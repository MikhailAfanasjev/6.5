package ru.vsu.cs.course1;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class FormMain extends JFrame {
    private JTextArea textAreaInput;
    private JPanel panelMain;
    private JButton button1;
    private JTextArea textArea1;
    private JTextField textField1;
    private JButton myHashMapButton;
    private JButton Button3;

    public FormMain() {
        this.setTitle("task 8");
        this.setContentPane(panelMain);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.pack();

        Button3.addActionListener(e ->
        {
            {
                String data = "";
                try {
                    File myObj = new File("input.txt");
                    Scanner myReader = new Scanner(myObj);
                    while (myReader.hasNextLine()) {
                        data = myReader.nextLine();
                    }
                    myReader.close();
                } catch (FileNotFoundException ee) {
                    System.out.println("Нет файла");
                    ee.printStackTrace();
                }
                textAreaInput.setText(data);
            }

        });
        button1.addActionListener(e ->
        {

            {
                String s = textAreaInput.getText();
                String result = s.replaceAll("\\.|\\,|\\!|\\?|\\:|\\;|\\-", "");
                String[] Mas = result.split(" ");

                HashMap<String, Integer> HM = new HashMap<>();
                int k = 1;
                for (int i = 0; i < Mas.length; i++) {
                    if (HM.containsKey(Mas[i])) {
                        k = HM.get(Mas[i]);
                        k++;
                    } else {
                        k = 1;
                    }
                    HM.put(Mas[i], k);
                }

                int count;
                String word = "";

                count = Integer.parseInt(textField1.getText());
                for (Map.Entry x : HM.entrySet())
                    if (x.getValue().equals(count))
                        word += x.getKey() + " ";
                textArea1.setText(word);
            }

        });
        myHashMapButton.addActionListener(e ->
        {
            {
                String s = textAreaInput.getText();
                String result = s.replaceAll("\\.|\\,|\\!|\\?|\\:|\\;|\\-", "");
                String[] Mas = result.split(" ");

                MyHashMap<String, Integer> SHM = new MyHashMap<String, Integer>();
                int k = 1;

                for (int i = 0; i < Mas.length; i++) {
                    if (SHM.get(Mas[i]) != null) {
                        k = SHM.get(Mas[i]);
                        k++;
                    } else {
                        k = 1;
                    }
                    SHM.put(Mas[i], k);
                }

                int count;
                String words = "";

                count = Integer.parseInt(textField1.getText());

                {
                    ArrayList<String> word = SHM.getKeys(count);
                    if (word != null) {
                        for (String m : word)
                            words += m + " ";
                        textArea1.setText(words);
                    } else textArea1.setText("Нет слов");
                }
            }
        });
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here

        $$$setupUI$$$();
    }
    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new GridLayoutManager(6, 5, new Insets(10, 10, 10, 10), 10, 10));
        textAreaInput = new JTextArea();
        Font textAreaInputFont = this.$$$getFont$$$("Courier New", -1, 20, textAreaInput.getFont());
        if (textAreaInputFont != null) textAreaInput.setFont(textAreaInputFont);
        textAreaInput.setText("");
        panelMain.add(textAreaInput, new GridConstraints(0, 0, 1, 5, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(-1, 200), null, 0, false));
        button1 = new JButton();
        button1.setText("Получить слово hashMap");
        panelMain.add(button1, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(500, 30), null, 0, false));
        textArea1 = new JTextArea();
        panelMain.add(textArea1, new GridConstraints(5, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 150), null, 0, false));
        textField1 = new JTextField();
        textField1.setText("");
        textField1.setToolTipText("");
        panelMain.add(textField1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        Button3 = new JButton();
        Button3.setText("Вставить из файла");
        panelMain.add(Button3, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(500, 30), null, 0, false));
        myHashMapButton = new JButton();
        myHashMapButton.setText("Получить слово MyhashMap");
        panelMain.add(myHashMapButton, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(500, 30), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }
}


